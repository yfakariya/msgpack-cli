<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#

var __integerTypes = new []
{
	typeof( byte ),
	typeof( sbyte ),
	typeof( short ), 
	typeof( ushort ),
	typeof( int ), 
	typeof( uint ), 
	typeof( long ), 
	typeof( ulong )
};

var __floatingTypes = new []
{
	typeof( float ),
	typeof( double )
};

Func<Type, bool> __isUnsigned =
	type => type == typeof( byte ) || type == typeof( ushort ) || type == typeof( uint ) || type == typeof( ulong );

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	[TestFixture]
	public partial class MessagePackObjectTest
	{
		private TextWriter Console
		{
			get
			{
#if !NETFX_CORE && !SILVERLIGHT
				return System.Console.Out;
#else
				return TextWriter.Null;
#endif
			}
		}
<#
foreach( var __type in __integerTypes )
{
#>

		[Test]
		public void TestAs<#= __type.Name #>()
		{
			TestAs<#= __type.Name #>( 0 );
			TestAs<#= __type.Name #>( 127 );
<#
	if( __type != typeof( sbyte ) )
	{
#>
			TestAs<#= __type.Name #>( 128 );
<#
	}
	
	if( !__isUnsigned( __type ) )
	{
#>
			TestAs<#= __type.Name #>( -1 );
			TestAs<#= __type.Name #>( -31 );
			TestAs<#= __type.Name #>( -32 );
<#
	}
#>
			TestAs<#= __type.Name #>( ( <#= __type.Name #> )1 );
			TestAs<#= __type.Name #>( <#= __type.Name #>.MinValue );
			TestAs<#= __type.Name #>( <#= __type.Name #>.MaxValue );
			var sw = Stopwatch.StartNew();
			var rand = new TestRandom();
			for ( int i = 0; i < 100000; i++ )
			{
				TestAs<#= __type.Name #>( rand.Next<#= __type.Name #>() );
			}
			sw.Stop();
			Console.WriteLine( "<#= __type.Name #>: {0:#,0.###} usec/object", sw.Elapsed.Ticks / 1000000.0 );
		}

		private static void TestAs<#= __type.Name #>( <#= __type.Name #> value )
		{
			var target = new MessagePackObject( value );
			Assert.That( ( <#= __type.Name #> )target, Is.EqualTo( value ) );
		}
		
<#
	if( !__type.Name.EndsWith( "64" ) )
	{
#>
		[Test]
		public void TestAs<#= __type.Name #>Overflow()
		{
			var target = new MessagePackObject( <#= __type.Name #>.MaxValue + 1<#= __type.Name.EndsWith( "32" ) ? "L" : String.Empty #> );
			Assert.Throws<InvalidOperationException>(
				() =>
				{
					var result = ( <#= __type.Name #> )target;
					Console.WriteLine( "TestAs<#= __type.Name #>Overflow:0x{0:x}({0:#,0})[{1}]", result, result.GetType() );
				}
			);
		}
		
		[Test]
		public void TestAs<#= __type.Name #>Underflow()
		{
			var target = new MessagePackObject( <#= __type.Name #>.MinValue - 1<#= __type.Name.EndsWith( "32" ) ? "L" : String.Empty #> );
			Assert.Throws<InvalidOperationException>(
				() =>
				{
					var result = ( <#= __type.Name #> )target;
					Console.WriteLine( "TestAs<#= __type.Name #>Overflow:0x{0:x}({0:#,0})[{1}]", result, result.GetType() );
				}
			);
		}
<#
	}
	else if( __type == typeof( Int64 ) )
	{
#>
		[Test]
		public void TestAs<#= __type.Name #>Overflow()
		{
			var target = new MessagePackObject( ( UInt64 )Int64.MaxValue + 1 );
			Assert.Throws<InvalidOperationException>(
				() =>
				{
					var result = ( <#= __type.Name #> )target;
					Console.WriteLine( "TestAs<#= __type.Name #>Overflow:0x{0:x}({0:#,0})[{1}]", result, result.GetType() );
				}
			);
		}
<#
	}
	else // UInt64
	{
#>
		[Test]
		public void TestAs<#= __type.Name #>Underflow()
		{
			var target = new MessagePackObject( -1 );
			Assert.Throws<InvalidOperationException>(
				() =>
				{
					var result = ( <#= __type.Name #> )target;
					Console.WriteLine( "TestAs<#= __type.Name #>Overflow:0x{0:x}({0:#,0})[{1}]", result, result.GetType() );
				}
			);
		}<#
	}
#>

<#
}

foreach( var __type in __floatingTypes )
{
#>

		[Test]
		public void TestAs<#= __type.Name #>()
		{
			TestAs<#= __type.Name #>( 0.0<#= __type == typeof( float ) ? "f" : "" #> );
			TestAs<#= __type.Name #>( -0.0<#= __type == typeof( float ) ? "f" : "" #> );
			TestAs<#= __type.Name #>( 1.0<#= __type == typeof( float ) ? "f" : "" #> );
			TestAs<#= __type.Name #>( -1.0<#= __type == typeof( float ) ? "f" : "" #> );
			TestAs<#= __type.Name #>( <#= __type.Name #>.MaxValue );
			TestAs<#= __type.Name #>( <#= __type.Name #>.MinValue );
			TestAs<#= __type.Name #>( <#= __type.Name #>.NaN );
			TestAs<#= __type.Name #>( <#= __type.Name #>.NegativeInfinity );
			TestAs<#= __type.Name #>( <#= __type.Name #>.PositiveInfinity );
			var sw = Stopwatch.StartNew();
			TestRandom rand = new TestRandom();
			for ( int i = 0; i < 100000; i++ )
			{
				TestAs<#= __type.Name #>( rand.Next<#= __type.Name #>() );
			}
			sw.Stop();
			Console.WriteLine( "<#= __type.Name #>: {0:#,0.###} usec/object", sw.Elapsed.Ticks / 1000000.0 );
		}

		private static void TestAs<#= __type.Name #>( <#= __type.Name #> value )
		{
			var target = new MessagePackObject( value );
			Assert.That( ( <#= __type.Name #> )target, Is.EqualTo( value ).Within( 10e-10 ) );
		}
<#
}
#>
	}
}
