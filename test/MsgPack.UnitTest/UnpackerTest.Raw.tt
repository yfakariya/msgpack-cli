<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#

var testSituations =
	new []
	{
		// Suffix, Value Type, Unit Value Expression, Expected Value Expression Format, is str
		Tuple.Create( "String", "String", "'A'", "new String( {0}, {1} )", true ),
		Tuple.Create( "Binary", "Byte[]", "0xFF", "Enumerable.Repeat( {0}, {1} ).ToArray()", false )
	};
var strVariations =
	new []
	{
		// Label, Length, Header Bytes, Header Type
		Tuple.Create( "FixStr", 0, "0xA0", "String" ),
		Tuple.Create( "FixStr", 1, "0xA1", "String" ),
		Tuple.Create( "FixStr", 0x1F, "0xBF", "String" ),
		Tuple.Create( "Str8", 0, "0xD9, 0", "String" ),
		Tuple.Create( "Str8", 1, "0xD9, 1", "String" ),
		Tuple.Create( "Str8", 0x1F, "0xD9, 0x1F", "String" ),
		Tuple.Create( "Str8", 0x20, "0xD9, 0x20", "String" ),
		Tuple.Create( "Str8", 0xFF, "0xD9, 0xFF", "String" ),
		Tuple.Create( "Str16", 0, "0xDA, 0, 0", "String" ),
		Tuple.Create( "Str16", 1, "0xDA, 0, 1", "String" ),
		Tuple.Create( "Str16", 0x1F, "0xDA, 0, 0x1F", "String" ),
		Tuple.Create( "Str16", 0x20, "0xDA, 0, 0x20", "String" ),
		Tuple.Create( "Str16", 0xFF, "0xDA, 0, 0xFF", "String" ),
		Tuple.Create( "Str16", 0x100, "0xDA, 1, 0", "String" ),
		Tuple.Create( "Str16", 0xFFFF, "0xDA, 0xFF, 0xFF", "String" ),
		Tuple.Create( "Str32", 0, "0xDB, 0, 0, 0, 0", "String" ),
		Tuple.Create( "Str32", 1, "0xDB, 0, 0, 0, 1", "String" ),
		Tuple.Create( "Str32", 0x1F, "0xDB, 0, 0, 0, 0x1F", "String" ),
		Tuple.Create( "Str32", 0x20, "0xDB, 0, 0, 0, 0x20", "String" ),
		Tuple.Create( "Str32", 0xFF, "0xDB, 0, 0, 0, 0xFF", "String" ),
		Tuple.Create( "Str32", 0x100, "0xDB, 0, 0, 1, 0", "String" ),
		Tuple.Create( "Str32", 0xFFFF, "0xDB, 0, 0, 0xFF, 0xFF", "String" ),
		Tuple.Create( "Str32", 0x10000, "0xDB, 0, 1, 0, 0", "String" ),
	};

var binVariations =
	new []
	{
		// Label, Length, Header Bytes, Header Type
		Tuple.Create( "Bin8", 0, "0xC4, 0", "Byte[]" ),
		Tuple.Create( "Bin8", 1, "0xC4, 1", "Byte[]" ),
		Tuple.Create( "Bin8", 0x1F, "0xC4, 0x1F", "Byte[]" ),
		Tuple.Create( "Bin8", 0x20, "0xC4, 0x20", "Byte[]" ),
		Tuple.Create( "Bin8", 0xFF, "0xC4, 0xFF", "Byte[]" ),
		Tuple.Create( "Bin16", 0, "0xC5, 0, 0", "Byte[]" ),
		Tuple.Create( "Bin16", 1, "0xC5, 0, 1", "Byte[]" ),
		Tuple.Create( "Bin16", 0x1F, "0xC5, 0, 0x1F", "Byte[]" ),
		Tuple.Create( "Bin16", 0x20, "0xC5, 0, 0x20", "Byte[]" ),
		Tuple.Create( "Bin16", 0xFF, "0xC5, 0, 0xFF", "Byte[]" ),
		Tuple.Create( "Bin16", 0x100, "0xC5, 1, 0", "Byte[]" ),
		Tuple.Create( "Bin16", 0xFFFF, "0xC5, 0xFF, 0xFF", "Byte[]" ),
		Tuple.Create( "Bin32", 0, "0xC6, 0, 0, 0, 0", "Byte[]" ),
		Tuple.Create( "Bin32", 1, "0xC6, 0, 0, 0, 1", "Byte[]" ),
		Tuple.Create( "Bin32", 0x1F, "0xC6, 0, 0, 0, 0x1F", "Byte[]" ),
		Tuple.Create( "Bin32", 0x20, "0xC6, 0, 0, 0, 0x20", "Byte[]" ),
		Tuple.Create( "Bin32", 0xFF, "0xC6, 0, 0, 0, 0xFF", "Byte[]" ),
		Tuple.Create( "Bin32", 0x100, "0xC6, 0, 0, 1, 0", "Byte[]" ),
		Tuple.Create( "Bin32", 0xFFFF, "0xC6, 0, 0, 0xFF, 0xFF", "Byte[]" ),
		Tuple.Create( "Bin32", 0x10000, "0xC6, 0, 1, 0, 0", "Byte[]" ),
	};

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	// This file was generated from UnpackerTest.Raw.tt T4Template.
	// Do not modify this file. Edit UnpackerTest.Raw.tt instead.

	partial class UnpackerTest
	{
<#
foreach( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>

#if FEATURE_TAP
<#
	}

	foreach( var testSituation in testSituations )
	{
		foreach( var testCase in strVariations )
		{
			PutTest( testSituation, testCase, testSituation.Item5 || testCase.Item2 == 0, isAsync );
		}

		// can be bin stream.
		foreach( var testCase in binVariations )
		{
			PutTest( testSituation, testCase, false, isAsync );
		}
	}

	if ( isAsync )
	{
#>

#endif // FEATURE_TAP

<#
	}
}
#>
	}
}
<#+
private void PutTest( Tuple<string, string, string, string, bool> testSituation, Tuple<string, int, string, string> testCase, bool canConvertToString, bool isAsync )
{
	var readDataMethodPrefix = "TestRead_" + testCase.Item1 + "_" + testCase.Item2 + ( isAsync ? "Async" : String.Empty ) + "_As" + testSituation.Item1 + "_";
	PutTestMethod( readDataMethodPrefix + "JustLength", testSituation, testCase, 0, canConvertToString, PutTestUnpackDataBody, isAsync );
	PutTestMethod( readDataMethodPrefix + "TooShort", testSituation, testCase, -1, canConvertToString, PutTestUnpackDataBody, isAsync );
	PutTestMethod( readDataMethodPrefix + "HasExtra", testSituation, testCase, 1,  canConvertToString, PutTestUnpackDataBody, isAsync );

	var readDirectMethodPrefix = "TestRead" + testSituation.Item1 + "_" + testCase.Item1 + ( isAsync ? "Async" : String.Empty ) + "_" + testCase.Item2 + "_";
	PutTestMethod( readDirectMethodPrefix + "JustLength", testSituation, testCase, 0, canConvertToString, PutTestUnpackDirectBody, isAsync );
	PutTestMethod( readDirectMethodPrefix + "TooShort", testSituation, testCase, -1, canConvertToString, PutTestUnpackDirectBody, isAsync );
	PutTestMethod( readDirectMethodPrefix + "HasExtra", testSituation, testCase, 1, canConvertToString, PutTestUnpackDirectBody , isAsync );
}

private void PutTestUnpackDataBody( Tuple<string, string, string, string, bool> testSituation, string sourceType, string expectedValue, bool canConvertToString, bool success, bool isAsync )
{
	if ( success )
	{
		if ( !isAsync )
		{
#>
				Assert.That( unpacker.Read(), Is.True );
<#+
		}
		else
		{
#>
				Assert.That( await unpacker.ReadAsync(), Is.True );
<#+
		}
#>
#pragma warning disable 612,618
				var result = unpacker.Data;
#pragma warning restore 612,618
				Assert.That( result.HasValue, Is.True );
<#+
		if ( testSituation.Item2 == sourceType )
		{
#>
				Assert.That( ( <#= sourceType #> )result.Value, Is.EqualTo( <#= expectedValue #> ) );
				Assert.That( result.Value.UnderlyingType, Is.EqualTo( typeof( <#= sourceType #> ) ) );
<#+
		}
#>

				// raw/str always can be byte[]
				var asBinary = ( byte[] )result.Value;
<#+
		if ( canConvertToString )
		{
#>
				var asString = ( String )result.Value;
<#+
		}
		else
		{
#>
				Assert.Throws<InvalidOperationException>( () => { var asString = ( String )result.Value; } );
<#+
		}

		if ( canConvertToString )
		{
#>
				Assert.That( result.Value.IsTypeOf( typeof( string ) ).GetValueOrDefault() );
<#+
		}
		else
		{
#>
				Assert.That( result.Value.IsTypeOf( typeof( string ) ).GetValueOrDefault(), Is.False );
<#+
		}
#>
				Assert.That( result.Value.IsTypeOf( typeof( byte[] ) ).GetValueOrDefault() );
<#+
	}
	else
	{
		if ( !isAsync )
		{
#>
				if ( this.CanRevert( unpacker ) )
				{
					// Just fail and revert.
					var initialOffset = this.GetOffset( unpacker );
					Assert.That( unpacker.Read(), Is.False );
					Assert.That( this.GetOffset( unpacker ), Is.EqualTo( initialOffset ) );
				}
				else
				{
					Assert.Throws<InvalidMessagePackStreamException>( () => unpacker.Read() );
				}
<#+
		}
		else
		{
#>
				if ( this.CanRevert( unpacker ) )
				{
					// Just fail and revert.
					var initialOffset = this.GetOffset( unpacker );
					Assert.That( unpacker.ReadAsync().GetAwaiter().GetResult(), Is.False );
					Assert.That( this.GetOffset( unpacker ), Is.EqualTo( initialOffset ) );
				}
				else
				{
					AssertEx.ThrowsAsync<InvalidMessagePackStreamException>( async () => await unpacker.ReadAsync() );
				}
<#+
		}
	}
}

private void PutTestUnpackDirectBody( Tuple<string, string, string, string, bool> testSituation, string sourceType, string expectedValue, bool canConvertToString, bool success, bool isAsync )
{
	if ( success || !isAsync )
	{
#>
				<#= testSituation.Item2 #> result;
<#+
	}

	if ( success )
	{
		if ( !isAsync )
		{
#>
				Assert.That( unpacker.Read<#= testSituation.Item1 #>( out result ), Is.True );
<#+
		}
		else
		{
#>
				var ret = await unpacker.Read<#= testSituation.Item1 #>Async();
				Assert.That( ret.Success, Is.True );
				result = ret.Value;
<#+
		}
#>
				Assert.That( result, Is.EqualTo( <#= expectedValue #> ) );
<#+
	}
	else
	{
		if ( !isAsync )
		{
#>
				if ( this.CanRevert( unpacker ) )
				{
					// Just fail and revert.
					var initialOffset = this.GetOffset( unpacker );
					Assert.That( unpacker.Read<#= testSituation.Item1 #>( out result ), Is.False );
					Assert.That( this.GetOffset( unpacker ), Is.EqualTo( initialOffset ) );
				}
				else
				{
					Assert.Throws<InvalidMessagePackStreamException>( () => unpacker.Read<#= testSituation.Item1 #>( out result ) );
				}
<#+
		}
		else
		{
#>
				if ( this.CanRevert( unpacker ) )
				{
					// Just fail and revert.
					var initialOffset = this.GetOffset( unpacker );
					Assert.That( unpacker.Read<#= testSituation.Item1 #>Async().GetAwaiter().GetResult().Success, Is.False );
					Assert.That( this.GetOffset( unpacker ), Is.EqualTo( initialOffset ) );
				}
				else
				{
					AssertEx.ThrowsAsync<InvalidMessagePackStreamException>( async () => await unpacker.Read<#= testSituation.Item1 #>Async() );
				}
<#+
		}
	}
}

private void PutTestMethod( string methodName, Tuple<string, string, string, string, bool> testSituation, Tuple<string, int, string, string> testCase, int valueLengthAjustument, bool canConvertToString, Action<Tuple<string, string, string, string, bool>, string, string, bool, bool, bool> putTestBody, bool isAsync )
{
	var adjustedValueLength = testCase.Item2 + valueLengthAjustument;
	if ( adjustedValueLength < 0 )
	{
		// Never occurred situation.
		return;
	}

	var expectedValue = String.Format( CultureInfo.InvariantCulture, testSituation.Item4, testSituation.Item3, testCase.Item2 );
	var willSuccess = valueLengthAjustument >= 0;
#>

		[Test]
		public <#= AsyncVoid( isAsync, valueLengthAjustument >= 0 ) #> <#= methodName #>()
		{
			using( var buffer =
				new MemoryStream( 
					new byte[] { <#= testCase.Item3 #> }
					.Concat( Enumerable.Repeat( ( byte )<#= testSituation.Item3 #>, <#= adjustedValueLength #> ) ).ToArray()
				)
			)
			using( var unpacker = this.CreateUnpacker( buffer ) )
			{
<#+
	putTestBody( testSituation, testCase.Item4, expectedValue, canConvertToString, willSuccess, isAsync );
#>
			}
		}
<#+

	if ( !willSuccess  )
	{
#>

		[Test]
		public <#= AsyncVoid( isAsync, valueLengthAjustument >= 0 ) #> <#= methodName #>_NotSeekable()
		{
			if ( !this.MayFailToRollback )
			{
				// skip because this test is not neccessary.
				return;
			}

			using( var buffer =
				new NonSeekableStream(
					new byte[] { <#= testCase.Item3 #> }
					.Concat( Enumerable.Repeat( ( byte )<#= testSituation.Item3 #>, <#= adjustedValueLength #> ) ).ToArray()
				)
			)
			using( var unpacker = this.CreateUnpacker( buffer ) )
			{
<#+
		putTestBody( testSituation, testCase.Item4, expectedValue, canConvertToString, willSuccess, isAsync );
#>
			}
		}
<#+
	}
}

private static string AsyncVoid( bool isAsync, bool willSuccess )
{
	return ( isAsync && willSuccess ) ? "async Task" : "void";
}
#>
