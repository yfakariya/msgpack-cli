<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="UnpackingTest.Common.ttinclude" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
var __integerType = typeof( ushort );
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{
	[TestFixture]
	public partial class UnpackingTest_Combinations_<#= __integerType.Name #>
	{
<#
var __minValue = BigInteger.Parse( __integerType.GetField( "MinValue" ).GetValue( null ).ToString() );
var __maxValue = BigInteger.Parse( __integerType.GetField( "MaxValue" ).GetValue( null ).ToString() );

foreach( var __integerValue in TestData.IntegerValues )
{
	TestCase __testCase = __integerValue.Value;
	var __isNotCompatible =
		__testCase.Value < __minValue || __maxValue < __testCase.Value;
	foreach( var __expression in __testCase.Expressions )
	{
#>
		[Test]
		public void TestUnpack<#= __integerType.Name #>_ByteArray_<#= __integerValue.Key #>As<#= ToValueId( __expression ) #>_<#= __isNotCompatible ? "AsIs" : "Fail" #>()
		{
<#
		if( !__isNotCompatible )
		{
#>
			var result = Unpacking.Unpack<#= __integerType.Name #>( <#= __expression #> );
			Assert.That( result.ReadCount, Is.EqualTo( <#= __expression.Count( c => c == ',' ) + 1 #> ) );
			Assert.That( result.Value, Is.EqualTo( <#= __testCase.Value #>L ) );
<#
		}
		else
		{
#>
			Assert.Throws<MessageTypeException>( () => Unpacking.Unpack<#= __integerType.Name #>( <#= __expression #> ) );
<#
		}
#>
		}
		
		[Test]
		public void TestUnpack<#= __integerType.Name #>_Stream_<#= __integerValue.Key #>As<#= ToValueId( __expression ) #>_<#= __isNotCompatible ? "AsIs" : "Fail" #>()
		{
			using ( var buffer = new MemoryStream( <#= __expression #> ) )
			{
<#
		if( !__isNotCompatible )
		{
#>
				var result = Unpacking.Unpack<#= __integerType.Name #>( buffer );
				Assert.That( buffer.Position, Is.EqualTo( <#= __expression.Count( c => c == ',' ) + 1 #> ) );
				Assert.That( result, Is.EqualTo( <#= __testCase.Value #>L ) );
<#
		}
		else
		{
#>
				Assert.Throws<MessageTypeException>( () => Unpacking.Unpack<#= __integerType.Name #>( buffer ) );
<#
		}
#>
			}
		}

<#
	}
}
#>
		<#= String.Format( CultureInfo.InvariantCulture, TestData.ArgumentErrorTemplate, __integerType.Name ) #>

		[Test]
		public void TestUnpack<#= __integerType.Name #>_ByteArray_Offset_OffsetIsValid_OffsetIsRespected()
		{
			// Offset 1 is positive fix num 1.
			var result = Unpacking.Unpack<#= __integerType.Name #>( new byte[] { 0xFF, 0x57, 0xFF }, 1 );
			Assert.That( result.ReadCount, Is.EqualTo( 1 ) );
			Assert.That( result.Value, Is.EqualTo( 0x57 ) );
		}

		[Test]
		public void TestUnpack<#= __integerType.Name #>_ByteArray_Null_Nil()
		{
			Assert.Throws<MessageTypeException>( () => Unpacking.Unpack<#= __integerType.Name #>( new byte[] { 0xC0 } ) );
		}
	
		[Test]
		public void TestUnpack<#= __integerType.Name #>_ByteArray_Not<#= __integerType.Name #>()
		{
			Assert.Throws<MessageTypeException>( () => Unpacking.Unpack<#= __integerType.Name #>( new byte[] { 0xA0 } ) );
		}
	}
}