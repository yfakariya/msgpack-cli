<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#
var __csharpPrimitives = new Dictionary<Type, string>
{
	{ typeof( byte ), "byte" },
	{ typeof( short ), "short" },
	{ typeof( int ), "int" },
	{ typeof( long ), "long" },
	{ typeof( float ), "float" },
	{ typeof( double ), "double" },
	{ typeof( char ), "char" },
	{ typeof( sbyte ), "sbyte" },
	{ typeof( ushort ), "ushort" },
	{ typeof( uint ), "uint" },
	{ typeof( ulong ), "ulong" }
};
#>
#region -- Licence Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion  -- Licence Terms --

using System;

namespace MsgPack
{
	public sealed partial class TestRandom : Random
	{
		private readonly byte[] _castBuffer = new byte[ sizeof( ulong ) ];
		public TestRandom() {}

		public TestRandom( int seed ) : base( seed ) {}

		public bool NextBoolean()
		{
			return base.Next() % 2 == 0;
		}
<#
foreach( var __type in
	new []
	{
		typeof( byte ),
		typeof( short ),
		typeof( int ),
		typeof( long ),
		typeof( float ),
		typeof( char )
	}
)
{
#>

<#
	if( __type == typeof( long ) || __type == typeof( float ) )
	
	{
#>
#if NET6_0_OR_GREATER
		public override <#= __type.Name #> Next<#= __type.Name #>()
#else // NET6_0_OR_GREATER
		public <#= __type.Name #> Next<#= __type.Name #>()
#endif // NET6_0_OR_GREATER
<#
	}
	else
	{
#>
		public <#= __type.Name #> Next<#= __type.Name #>()
<#
	}
#>
		{
			base.NextBytes( this._castBuffer );
<#
	if( __type == typeof( byte ) )
	{
#>
			return this._castBuffer[ 0 ];
<#
	}
	else
	{
#>
			return BitConverter.To<#= __type.Name #>( this._castBuffer, 0 );
<#
	}
#>
		}
<#
}

foreach( var __type in
	new []
	{
		typeof( sbyte ),
		typeof( ushort ),
		typeof( uint ),
		typeof( ulong )
	}
)
{
#>

#pragma warning disable 3021
		[CLSCompliant( false )]
#pragma warning restore 3021
		public <#= __type.Name #> Next<#= __type.Name #>()
		{
			base.NextBytes( this._castBuffer );
<#
	if( __type == typeof( sbyte ) )
	{
#>
			return unchecked( ( sbyte )this._castBuffer[ 0 ] );
<#
	}
	else
	{
#>
			return BitConverter.To<#= __type.Name #>( this._castBuffer, 0 );
<#
	}
#>
		}
<#
}
#>
	}
}
