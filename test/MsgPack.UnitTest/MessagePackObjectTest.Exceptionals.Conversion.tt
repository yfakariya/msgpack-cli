<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#

var __types =
	new []
	{
		typeof( bool ),
		typeof( sbyte ),
		typeof( short ),
		typeof( int ),
		typeof( long ),
		typeof( byte ),
		typeof( ushort ),
		typeof( uint ),
		typeof( ulong ),
		typeof( float ),
		typeof( double )
	};
	
var __integers =
	new []
	{
		typeof( sbyte ),
		typeof( short ),
		typeof( int ),
		typeof( long ),
		typeof( byte ),
		typeof( ushort ),
		typeof( uint ),
		typeof( ulong )
	};
	
var __reals =
	new []
	{
		typeof( float ),
		typeof( double )
	};
	
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack
{


	partial class MessagePackObjectTest_Exceptionals
	{
		private void Call<T>( T value )
		{
			// Nop
		}

<#
foreach( var __type in __types )
{
#>
		[Test]
		public void TestOpExplicit<#= __type.Name #>_Nil_Fail()
		{
			Assert.Throws<InvalidOperationException>( () => Call( ( <#= __type #> )( MessagePackObject.Nil ) ) );
		}
		
		[Test]
		public void TestOpExplicit<#= __type.Name #>_NotNumerics_Fail()
		{
			Assert.Throws<InvalidOperationException>( () => Call( ( <#= __type #> )( new MessagePackObject( "A" ) ) ) );
		}
		
<#
}

foreach( var __integer in __integers )
{
	foreach( var __real in __reals )
	{
#>
		[Test]
		public void TestOpExplicit<#= __integer.Name #>_<#= __real.Name #>PlusOne()
		{
			var result = ( <#= __integer #> )( new MessagePackObject( ( <#= __real #> )1 ) );
			Assert.That( result, Is.EqualTo( ( <#= __integer #> )( 1 ) ), new MessagePackObject( ( <#= __real #> )1 ).DebugDump() );
		}
		
<#
		if( !__integer.Name.StartsWith( "U" ) && __integer != typeof( byte ) )
		{
#>
		[Test]
		public void TestOpExplicit<#= __integer.Name #>_<#= __real.Name #>MinusOne()
		{
			var result = ( <#= __integer #> )( new MessagePackObject( ( <#= __real #> )( -1 ) ) );
			Assert.That( result, Is.EqualTo( ( <#= __integer #> )( -1 ) ), new MessagePackObject( ( <#= __real #> )( -1 ) ).DebugDump() );
		}
		
<#
		}
	}
	
	foreach( var __source in __integers )
	{
		var __destinationMinValue = BigInteger.Parse( __integer.GetField( "MinValue" ).GetValue( null ).ToString() );
		var __destinationMaxValue = BigInteger.Parse( __integer.GetField( "MaxValue" ).GetValue( null ).ToString() );
		var __sourceMinValue = BigInteger.Parse( __source.GetField( "MinValue" ).GetValue( null ).ToString() );
		var __sourceMaxValue = BigInteger.Parse( __source.GetField( "MaxValue" ).GetValue( null ).ToString() );
		var __isExceptional = __sourceMinValue < __destinationMinValue;
#>
		[Test]
		public void TestOpExplicit<#= __integer.Name #>_<#= __source.Name #>MinValue_<#= __isExceptional ? "Fail" : "Success" #>()
		{
<#
		if( !__isExceptional )
		{
#>
			var result = ( <#= __integer #> )( new MessagePackObject( <#= __source.Name #>.MinValue ) );
			Assert.That( result, Is.EqualTo( ( <#= __integer #> )( <#= __source.Name #>.MinValue ) ) );
<#
		}
		else
		{
#>
			Assert.Throws<InvalidOperationException>( () => Call( ( <#= __integer #> )( new MessagePackObject( <#= __source.Name #>.MinValue ) ) ) );
<#
		}
#>
		}

<#
		__isExceptional = __destinationMaxValue < __sourceMaxValue;
#>
		[Test]
		public void TestOpExplicit<#= __integer.Name #>_<#= __source.Name #>MaxValue_<#= __isExceptional ? "Fail" : "Success" #>()
		{
<#
		if( !__isExceptional )
		{
#>
			var result = ( <#= __integer #> )( new MessagePackObject( <#= __source.Name #>.MaxValue ) );
			Assert.That( result, Is.EqualTo( ( <#= __integer #> )( <#= __source.Name #>.MaxValue ) ) );
<#
		}
		else
		{
#>
			Assert.Throws<InvalidOperationException>( () => Call( ( <#= __integer #> )( new MessagePackObject( <#= __source.Name #>.MaxValue ) ) ) );
<#
		}
#>
		}

<#
	}
}

foreach( var __real in __reals )
{
#>
		[Test]
		public void TestOpExplicit<#= __real.Name #>_UInt64MaxValue()
		{
			var result = ( <#= __real #> )( new MessagePackObject( UInt64.MaxValue ) );
			Assert.That( result, Is.EqualTo( ( <#= __real #> )( UInt64.MaxValue ) ).Within( ( <#= __real #> )0 ), new MessagePackObject( UInt64.MaxValue ).DebugDump() );
		}
		
		[Test]
		public void TestOpExplicit<#= __real.Name #>_Int64MinValue()
		{
			var result = ( <#= __real #> )( new MessagePackObject( Int64.MinValue ) );
			Assert.That( result, Is.EqualTo( ( <#= __real #> )( Int64.MinValue ) ).Within( ( <#= __real #> )0 ), new MessagePackObject( Int64.MinValue ).DebugDump() );
		}
		
<#
}
#>
	}
}
