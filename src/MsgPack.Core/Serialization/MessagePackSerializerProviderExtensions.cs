#warning TODO: Move this type to MsgPack.Serialization with SerializationOptionsBuider.UseMsgPack() extension method.

#if false
// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

#nullable enable

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;
using System.Runtime.CompilerServices;
using MsgPack.Codecs;

namespace MsgPack.Serialization
{
#warning TODO: Move this type to MsgPack.Serialization with SerializationOptionsBuider.UseMsgPack() extension method.
	/// <summary>
	///		Defines extension methods with typed parameter for serializer providers using msgpack format.
	/// </summary>
	public static class SerializerProviderExtensions
	{
		/// <summary>
		///		Gets the <see cref="Serializer"/> object for the specified type without any polymorphism.
		/// </summary>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="targetType">The target type of the serializer. This type cannot be abstract type including interfaces.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <returns>The <see cref="Serializer"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="targetType" /> is <c>null</c>.
		///	</exception>
		/// <exception cref="ArgumentException">
		///		<paramref name="targetType"> is abstract type and is not known collection interface.
		/// </exception>
		public static Serializer GetMessagePackSerializer(this SerializerProvider provider, Type targetType, MessagePackCodecProvider? codecProvider = null)
			=> (Ensure.NotNull(provider).GetSerializer(targetType, null, codecProvider ?? MessagePackCodecProvider.Default) as Serializer)!;

		/// <summary>
		///		Gets the polymorphic <see cref="Serializer"/> object for the specified type, and polymorphism schema defined by the member metadata.
		/// </summary>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="targetType">The target type of the serializer. This type can be abstract type including interfaces.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <param name="schema">The <see cref="PolymorphismSchema"/> to tell polymoprhism related information to the underlying serializer provider. This value is defined by the member metadata.. This parameer is optional.</param>
		/// <returns>The <see cref="Serializer"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="targetType" /> is <c>null</c>.
		///	</exception>
		/// <remarks>
		///		When <paramref name="schema"/> is <c>null</c>, this method is identical to <see cref="GetMessagePackSerializer{T}(SerializerProvider)"/>.
		/// </remarks>
		public static Serializer GetPolymorphicMessagePackSerializer(this SerializerProvider provider, Type targetType, MessagePackCodecProvider? codecProvider = null, PolymorphismSchema? schema = null)
			=> (Ensure.NotNull(provider).GetSerializer(targetType, schema ?? PolymorphismSchema.Default, codecProvider ?? MessagePackCodecProvider.Default) as Serializer)!;

		/// <summary>
		///		Gets the <see cref="Serializer"/> object for the specified enum type, and enum serialization method defined by the member metadata.
		/// </summary>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="targetType">The target type of the serializer. This type must be enum type.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <param name="defaultEnumSerializationMethod">The <see cref="EnumSerializationMethod"/> to tell enum serialization method to the underlying serializer provider. This value is defined by the member metadata. This parameer is optional.</param>
		/// <returns>The <see cref="Serializer"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="targetType" /> is <c>null</c>.
		///	</exception>
		/// <exception cref="ArgumentException">
		///		<paramref name="targetType"> is not enum type.
		/// </exception>
		/// <remarks>
		///		When <paramref name="defaultEnumSerializationMethod"/> is <c>null</c>, the default value which was configured in <see cref="EnumSerializationOptionsBuilder"/> or the underlying codec is used.
		/// </remarks>
		public static Serializer GetEnumMessagePackSerializer(this SerializerProvider provider, Type targetType, MessagePackCodecProvider? codecProvider = null, EnumSerializationMethod? defaultEnumSerializationMethod = null)
				=> (Ensure.NotNull(provider).GetSerializer(EnsureEnumType(targetType), BoxedEnumSerializationMethod.Get(defaultEnumSerializationMethod), codecProvider ?? MessagePackCodecProvider.Default) as Serializer)!;

		/// <summary>
		///		Gets the <see cref="Serializer"/> object for the specified date time like type, and date time conversion method defined by the member metadata.
		/// </summary>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="targetType">The target type of the serializer. This type should be one of the well known date time like types.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <param name="defaultDateTimeConversionMethod">The <see cref="DateTimeConversionMethod"/> to tell date time conversion method to the underlying serializer provider. This value is defined by the member metadata. This parameter is optional.</param>
		/// <returns>The <see cref="Serializer"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="targetType" /> is <c>null</c>.
		///	</exception>
		/// <exception cref="ArgumentException">
		///		<paramref name="targetType"> is not a well known date time like type.
		/// </exception>
		/// <remarks>
		///		When <paramref name="defaultDateTimeConversionMethod"/> is <c>null</c>, the default value which was configured in <see cref="DateTimeSerializationOptionsBuilder"/> or the underlying codec is used.
		///		The following types are considered as date time like types and their <see cref="Nullable{T}"/>:
		///		<list type="bullet">
		///			<item><see cref="DateTime"/></item>
		///			<item><see cref="DateTimeOffset"/></item>
		///			<item><see cref="Timestamp"/></item>
		///		</list>
		/// </remarks>
		public static Serializer GetDateTimeMessagePackSerializer(this SerializerProvider provider, Type targetType, MessagePackCodecProvider? codecProvider = null, DateTimeConversionMethod? defaultDateTimeConversionMethod = null)
			=> (Ensure.NotNull(provider).GetSerializer(targetType, BoxedDateTimeConversionMethod.Get(defaultDateTimeConversionMethod), codecProvider ?? MessagePackCodecProvider.Default) as Serializer)!;

		/// <summary>
		///		Gets the <see cref="Serializer{T}"/> object for the specified type without any polymorphism.
		/// </summary>
		/// <typeparam name="T">The target type of the serializer. This type cannot be abstract type including interfaces.</typeparam>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <returns>The <see cref="Serializer{T}"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///	</exception>
		/// <exception cref="InvalidOperationException">
		///		<typeparamref name="T"> is abstract type and is not known collection interface.
		/// </exception>
		public static Serializer<T> GetMessagePackSerializer<T>(this SerializerProvider provider, MessagePackCodecProvider? codecProvider = null)
			=> (Ensure.NotNull(provider).GetSerializer(typeof(T), null, codecProvider ?? MessagePackCodecProvider.Default) as Serializer<T>)!;

		/// <summary>
		///		Gets the polymorphic <see cref="Serializer{T}"/> object for the specified type, and polymorphism schema defined by the member metadata.
		/// </summary>
		/// <typeparam name="T">The target type of the serializer. This type can be abstract type including interfaces.</typeparam>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <param name="schema">The <see cref="PolymorphismSchema"/> to tell polymoprhism related information to the underlying serializer provider. This value is defined by the member metadata.. This parameer is optional.</param>
		/// <returns>The <see cref="Serializer{T}"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///	</exception>
		/// <remarks>
		///		When <paramref name="schema"/> is <c>null</c>, this method is identical to <see cref="GetMessagePackSerializer{T}(SerializerProvider)"/>.
		/// </remarks>
		public static Serializer<T> GetPolymorphicMessagePackSerializer<T>(this SerializerProvider provider, MessagePackCodecProvider? codecProvider = null, PolymorphismSchema? schema = null)
			=> (Ensure.NotNull(provider).GetSerializer(typeof(T), schema ?? PolymorphismSchema.Default, codecProvider ?? MessagePackCodecProvider.Default) as Serializer<T>)!;

		/// <summary>
		///		Gets the <see cref="Serializer{T}"/> object for the specified enum type, and enum serialization method defined by the member metadata.
		/// </summary>
		/// <typeparam name="T">The target type of the serializer. This type must be enum type.</typeparam>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <param name="defaultEnumSerializationMethod">The <see cref="EnumSerializationMethod"/> to tell enum serialization method to the underlying serializer provider. This value is defined by the member metadata. This parameer is optional.</param>
		/// <returns>The <see cref="Serializer{T}"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///	</exception>
		/// <exception cref="InvalidOperationException">
		///		<typeparamref name="T"> is not enum type.
		/// </exception>
		/// <remarks>
		///		When <paramref name="defaultEnumSerializationMethod"/> is <c>null</c>, the default value which was configured in <see cref="EnumSerializationOptionsBuilder"/> or the underlying codec is used.
		/// </remarks>
		public static Serializer<T> GetEnumMessagePackSerializer<T>(this SerializerProvider provider, MessagePackCodecProvider? codecProvider = null, EnumSerializationMethod? defaultEnumSerializationMethod = null)
				where T : Enum
				=> (Ensure.NotNull(provider).GetSerializer(EnsureEnumType<T>(), BoxedEnumSerializationMethod.Get(defaultEnumSerializationMethod), codecProvider ?? MessagePackCodecProvider.Default) as Serializer<T>)!;

		/// <summary>
		///		Gets the <see cref="Serializer{T}"/> object for the specified date time like type, and date time conversion method defined by the member metadata.
		/// </summary>
		/// <typeparam name="T">The target type of the serializer. This type should be one of the well known date time like types.</typeparam>
		/// <param name="provider">The <see cref="SerializerProvider"/>.</param>
		/// <param name="codecProvider">The <see cref="CodecProvider" /> to get <see cref="FormatEncoder" /> and <see cref="FormatDecoder" />.</param>
		/// <param name="defaultDateTimeConversionMethod">The <see cref="DateTimeConversionMethod"/> to tell date time conversion method to the underlying serializer provider. This value is defined by the member metadata. This parameter is optional.</param>
		/// <returns>The <see cref="Serializer{T}"/> object for the specified type.</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///	</exception>
		/// <exception cref="InvalidOperationException">
		///		<typeparamref name="T"> is not a well known date time like type.
		/// </exception>
		/// <remarks>
		///		When <paramref name="defaultDateTimeConversionMethod"/> is <c>null</c>, the default value which was configured in <see cref="DateTimeSerializationOptionsBuilder"/> or the underlying codec is used.
		///		The following types are considered as date time like types and their <see cref="Nullable{T}"/>:
		///		<list type="bullet">
		///			<item><see cref="DateTime"/></item>
		///			<item><see cref="DateTimeOffset"/></item>
		///			<item><see cref="Timestamp"/></item>
		///		</list>
		/// </remarks>
		public static Serializer<T> GetDateTimeMessagePackSerializer<T>(this SerializerProvider provider, MessagePackCodecProvider? codecProvider = null, DateTimeConversionMethod? defaultDateTimeConversionMethod = null)
			=> (Ensure.NotNull(provider).GetSerializer(typeof(T), BoxedDateTimeConversionMethod.Get(defaultDateTimeConversionMethod), codecProvider ?? MessagePackCodecProvider.Default) as Serializer<T>)!;

		private static Type EnsureEnumType(Type targetType, [CallerArgumentExpression("targetType")] string? paramName = null)
		{
			if (!Ensure.NotNull(targetType).GetIsEnum())
			{
				ThrowIsNotEnumType(targetType, paramName);
			}

			return targetType;
		}

		private static Type EnsureEnumType<T>()
		{
			if (!typeof(T).GetIsEnum())
			{
				ThrowIsNotEnumType(typeof(T), null);
			}

			return typeof(T);
		}

		private static void ThrowIsNotEnumType(Type targetType, string? paramName)
		{
			var message = $"Type '{targetType}' is not enum type.";
			if (paramName == null)
			{
				throw new InvalidOperationException(message);
			}
			else
			{
				throw new ArgumentException(message, paramName);
			}
		}
	}
}
#endif
