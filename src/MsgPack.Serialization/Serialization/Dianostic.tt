<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
const string prefix = "MsgPack.Serialization";

var listeners =
	new []
	{
		new
		{
			Name = "General",
			FullName = prefix,
			Events =
				new Event[]
				{
					"AotError",
					"HoistUpInnerExceptionFailed",
				}
		},
		new
		{
			Name = "GeneratorTrace",
			FullName = prefix + ".Generators.Trace",
			Events =
				new Event[]
				{
					"DetectedAsDeserializable",
					"DeserializationConstructorFound",
					"SkipStaticMember",
					"SkipIndexer",
					"SkipSetOnlyProperty",
					"SkipMemberDueToAccessibility",
					"UseCollectionAddForReadOnlyMember",
					"UseConstructorForMemberAccessDueToAccessibility",
					"UseConstructorForMemberAccessDueToReadOnly",
					"UseDelegateForMemberAccess",
					"UseDirectMemberAccessDueToPublic",
					"UseDirectMemberAccessDueToInternalsVisibleTo",
					"UseIgnoreAccessChecksToAttributeForMemberAccess",
					"UseReflectionMemberAccess",
					"WillBeAsymmetricDueToReadOnlyMember"
				}
		},
		new
		{
			Name = "PolymorphicTrace",
			FullName = prefix + ".Generators.Polymorphic.Trace",
			Events =
				new Event[]
				{
					"DefaultSchemaForValueType",
					"SchemaCreatedForRootType",
					"DefaultSchemaForUnqualifiedCollectionMember",
					"SchemaCreatedForCollectionMember",
					"DefaultSchemaForUnqualifiedDictionaryMember",
					"SchemaCreatedForDictionaryMember",
					"DefaultSchemaForUnqualifiedTupleMember",
					"SchemaCreatedForTupleMember",
					"DefaultSchemaForUnqualifiedObjectMember",
					"SchemaCreatedForObjectMember",
				}
		},
	};
#>
// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

#nullable enable

using System.Diagnostics;

namespace MsgPack.Serialization
{
	internal static class Diagnostic
	{
<#
foreach (var listener in listeners)
{
#>
		public static class <#= listener.Name #>
		{
			private static readonly DiagnosticSource Source = new DiagnosticListener("<#= listener.FullName #>");

			public static bool IsEnabled(string key)
				=> Source.IsEnabled(key);

			public static class Keys
			{
<#
	foreach (var @event in listener.Events)
	{
#>
				public const string <#= @event.Name #> = "<#= @event.Name #>";
<#
	}
#>
			}
<#
	foreach (var @event in listener.Events)
	{
#>

			public static void <#= @event.Name #>(<#= @event.DataType ?? "object" #> data)
				=> Source.Write(Keys.<#= @event.Name #>, data);
<#
	}
#>
		}

<#
}
#>
	}
}

<#+
class Event
{
	public string Name { get; }

	public string? DataType { get; set; }

	public Event (string name)
	{
		this.Name = name;
	}

	public static implicit operator Event(string name)
		=> new Event(name);
}
#>
