// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;

namespace MsgPack.Serialization
{
	public partial class SerializerProviderExtensions
	{
		/// <summary>
		///		Registers specified <see cref="ObjectSerializer" /> for the target type.
		/// </summary>
		/// <param name="provider">The <see cref="SerializerProvider" />.</param>
		/// <param name="targetType">The type of the serialization target.</param>
		/// <param name="serializer">The <see cref="ObjectSerializer" /> to be registered.</param>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="targetType" /> is <c>null</c>.
		///		Or, <paramref name="serializer" /> is <c>null</c>.
		/// </exception>
		public static void Register(this SerializerProvider provider, Type targetType, ObjectSerializer serializer)
			=> Ensure.NotNull(provider).Register(targetType, serializer, SerializerRegistrationOptions.None);

		/// <summary>
		///		Registers specified <see cref="ObjectSerializer" /> for the target type with overriding existing registration.
		/// </summary>
		/// <param name="provider">The <see cref="SerializerProvider" />.</param>
		/// <param name="targetType">The type of the serialization target.</param>
		/// <param name="serializer">The <see cref="ObjectSerializer" /> to be registered.</param>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="targetType" /> is <c>null</c>.
		///		Or, <paramref name="serializer" /> is <c>null</c>.
		/// </exception>
		public static void RegisterOverride(this SerializerProvider provider, Type targetType, ObjectSerializer serializer)
			=> Ensure.NotNull(provider).Register(targetType, serializer, SerializerRegistrationOptions.AllowOverride);

		/// <summary>
		///		Registers specified <see cref="ObjectSerializer{T}" /> for the target type.
		/// </summary>
		/// <typeparam name="T">The type of the serialization target.</typeparam>
		/// <param name="provider">The <see cref="SerializerProvider" />.</param>
		/// <param name="serializer">The <see cref="ObjectSerializer{T}" /> to be registered.</param>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="serializer" /> is <c>null</c>.
		/// </exception>
		public static void Register<T>(this SerializerProvider provider, ObjectSerializer<T> serializer)
			=> Ensure.NotNull(provider).Register(typeof(T), serializer, SerializerRegistrationOptions.None);

		/// <summary>
		///		Registers specified <see cref="ObjectSerializer{T}" /> for the target type with overriding existing registration.
		/// </summary>
		/// <typeparam name="T">The type of the serialization target.</typeparam>
		/// <param name="provider">The <see cref="SerializerProvider" />.</param>
		/// <param name="serializer">The <see cref="ObjectSerializer{T}" /> to be registered.</param>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
		///		Or, <paramref name="serializer" /> is <c>null</c>.
		/// </exception>
		public static void RegisterOverride<T>(this SerializerProvider provider, ObjectSerializer<T> serializer)
			=> Ensure.NotNull(provider).Register(typeof(T), serializer, SerializerRegistrationOptions.AllowOverride);

	}
}
