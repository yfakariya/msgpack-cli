<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;

namespace MsgPack.Serialization
{
	public partial class SerializerProviderExtensions
	{
<#
var specs =
	new []
	{
		new { MethodSuffix = String.Empty,	Options = "SerializerRegistrationOptions.None",				Summary = "Registers specified <see cref=\"ObjectSerializer{0}\" /> for the target type." },
		new { MethodSuffix = "Override",	Options = "SerializerRegistrationOptions.AllowOverride",	Summary = "Registers specified <see cref=\"ObjectSerializer{0}\" /> for the target type with overriding existing registration." },
	};

foreach (var isGeneric in new [] { false, true })
{
	var genericTypeParameter = isGeneric ? "<T>" : String.Empty;
	var docGenericTypeParameter = isGeneric ? "{T}" : String.Empty;
	var typeParameter = isGeneric ? String.Empty : "Type targetType, ";
	var typeArgument = isGeneric ? "typeof(T)" : "targetType";

	foreach (var spec in specs)
	{
#>
		/// <summary>
		///		<#= String.Format(CultureInfo.InvariantCulture, spec.Summary, docGenericTypeParameter) #>
		/// </summary>
<#
	if (isGeneric)
	{
#>
		/// <typeparam name="T">The type of the serialization target.</typeparam>
<#
	}
#>
		/// <param name="provider">The <see cref="SerializerProvider" />.</param>
<#
	if (!isGeneric)
	{
#>
		/// <param name="targetType">The type of the serialization target.</param>
<#
	}
#>
		/// <param name="serializer">The <see cref="ObjectSerializer<#= docGenericTypeParameter #>" /> to be registered.</param>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="provider" /> is <c>null</c>.
<#
	if (!isGeneric)
	{
#>
		///		Or, <paramref name="targetType" /> is <c>null</c>.
<#
	}
#>
		///		Or, <paramref name="serializer" /> is <c>null</c>.
		/// </exception>
		public static void Register<#= spec.MethodSuffix #><#= genericTypeParameter #>(this SerializerProvider provider, <#= typeParameter #>ObjectSerializer<#= genericTypeParameter #> serializer)
			=> Ensure.NotNull(provider).Register(<#= typeArgument #>, serializer, <#= spec.Options #>);

<#
	}
}
#>
	}
}
