<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Emit" #>
<#@ output extension=".cs" #>
<#
var opCodes = typeof(OpCodes).GetFields(BindingFlags.Public | BindingFlags.Static).Select(f => (OpCode)f.GetValue(null)).ToArray();
var opCode1Bytes = opCodes.Where(o => o.Value >= 0 && !o.Name.StartsWith("prefix")).ToArray();
var opCode2Bytes = opCodes.Where(o => o.Value < 0).ToArray();
#>
// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;
using System.Buffers.Binary;
using System.Reflection.Emit;

namespace MsgPack.Serialization.Reflection
{
	partial class ILTranspiler
	{
		private static OpCode Parse(Span<byte> il)
		{
			switch(il[0])
			{
<#
foreach (var opCode in opCode1Bytes)
{
#>
				case 0x<#= opCode.Value.ToString("X2") #>:
				{
					return OpCodes.<#= Pascalize(opCode.Name) #>; // <#= opCode.Name #> <#= opCode.OperandType #>
				}
<#
}
#>
				default:
				{
					var opCode = BinaryPrimitives.ReadUInt16BigEndian(il);
					switch (opCode)
					{
<#
foreach (var opCode in opCode2Bytes)
{
#>
						case 0x<#= opCode.Value.ToString("X4") #>:
						{
							return OpCodes.<#= Pascalize(opCode.Name) #>; // <#= opCode.Name #> <#= opCode.OperandType #>
						}
<#
}
#>
						default:
						{
							throw new Exception($"Unknown opcode 0x{opCode}.");
						}
					}
				}
			}
		}
	}
}
<#+
static readonly char[] SplitDelimiters = { '.' };
static readonly Dictionary<string, string> OpCodeNameMap =
	new Dictionary<string, string>
	{
		["tail."] = "Tailcall",
	};

string Pascalize(string name)
	=> OpCodeNameMap.TryGetValue(name, out var mapped) ?
		mapped :
		String.Join("_", name.Split(SplitDelimiters, StringSplitOptions.RemoveEmptyEntries).Select(n => Char.ToUpperInvariant(n[0]) + n.Substring(1)));
#>
