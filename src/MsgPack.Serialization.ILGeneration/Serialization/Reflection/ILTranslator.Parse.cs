// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;
using System.Buffers.Binary;
using System.Reflection.Emit;

namespace MsgPack.Serialization.Reflection
{
	partial class ILTranspiler
	{
		private static OpCode Parse(Span<byte> il)
		{
			switch(il[0])
			{
				case 0x00:
				{
					return OpCodes.Nop; // nop InlineNone
				}
				case 0x01:
				{
					return OpCodes.Break; // break InlineNone
				}
				case 0x02:
				{
					return OpCodes.Ldarg_0; // ldarg.0 InlineNone
				}
				case 0x03:
				{
					return OpCodes.Ldarg_1; // ldarg.1 InlineNone
				}
				case 0x04:
				{
					return OpCodes.Ldarg_2; // ldarg.2 InlineNone
				}
				case 0x05:
				{
					return OpCodes.Ldarg_3; // ldarg.3 InlineNone
				}
				case 0x06:
				{
					return OpCodes.Ldloc_0; // ldloc.0 InlineNone
				}
				case 0x07:
				{
					return OpCodes.Ldloc_1; // ldloc.1 InlineNone
				}
				case 0x08:
				{
					return OpCodes.Ldloc_2; // ldloc.2 InlineNone
				}
				case 0x09:
				{
					return OpCodes.Ldloc_3; // ldloc.3 InlineNone
				}
				case 0x0A:
				{
					return OpCodes.Stloc_0; // stloc.0 InlineNone
				}
				case 0x0B:
				{
					return OpCodes.Stloc_1; // stloc.1 InlineNone
				}
				case 0x0C:
				{
					return OpCodes.Stloc_2; // stloc.2 InlineNone
				}
				case 0x0D:
				{
					return OpCodes.Stloc_3; // stloc.3 InlineNone
				}
				case 0x0E:
				{
					return OpCodes.Ldarg_S; // ldarg.s ShortInlineVar
				}
				case 0x0F:
				{
					return OpCodes.Ldarga_S; // ldarga.s ShortInlineVar
				}
				case 0x10:
				{
					return OpCodes.Starg_S; // starg.s ShortInlineVar
				}
				case 0x11:
				{
					return OpCodes.Ldloc_S; // ldloc.s ShortInlineVar
				}
				case 0x12:
				{
					return OpCodes.Ldloca_S; // ldloca.s ShortInlineVar
				}
				case 0x13:
				{
					return OpCodes.Stloc_S; // stloc.s ShortInlineVar
				}
				case 0x14:
				{
					return OpCodes.Ldnull; // ldnull InlineNone
				}
				case 0x15:
				{
					return OpCodes.Ldc_I4_M1; // ldc.i4.m1 InlineNone
				}
				case 0x16:
				{
					return OpCodes.Ldc_I4_0; // ldc.i4.0 InlineNone
				}
				case 0x17:
				{
					return OpCodes.Ldc_I4_1; // ldc.i4.1 InlineNone
				}
				case 0x18:
				{
					return OpCodes.Ldc_I4_2; // ldc.i4.2 InlineNone
				}
				case 0x19:
				{
					return OpCodes.Ldc_I4_3; // ldc.i4.3 InlineNone
				}
				case 0x1A:
				{
					return OpCodes.Ldc_I4_4; // ldc.i4.4 InlineNone
				}
				case 0x1B:
				{
					return OpCodes.Ldc_I4_5; // ldc.i4.5 InlineNone
				}
				case 0x1C:
				{
					return OpCodes.Ldc_I4_6; // ldc.i4.6 InlineNone
				}
				case 0x1D:
				{
					return OpCodes.Ldc_I4_7; // ldc.i4.7 InlineNone
				}
				case 0x1E:
				{
					return OpCodes.Ldc_I4_8; // ldc.i4.8 InlineNone
				}
				case 0x1F:
				{
					return OpCodes.Ldc_I4_S; // ldc.i4.s ShortInlineI
				}
				case 0x20:
				{
					return OpCodes.Ldc_I4; // ldc.i4 InlineI
				}
				case 0x21:
				{
					return OpCodes.Ldc_I8; // ldc.i8 InlineI8
				}
				case 0x22:
				{
					return OpCodes.Ldc_R4; // ldc.r4 ShortInlineR
				}
				case 0x23:
				{
					return OpCodes.Ldc_R8; // ldc.r8 InlineR
				}
				case 0x25:
				{
					return OpCodes.Dup; // dup InlineNone
				}
				case 0x26:
				{
					return OpCodes.Pop; // pop InlineNone
				}
				case 0x27:
				{
					return OpCodes.Jmp; // jmp InlineMethod
				}
				case 0x28:
				{
					return OpCodes.Call; // call InlineMethod
				}
				case 0x29:
				{
					return OpCodes.Calli; // calli InlineSig
				}
				case 0x2A:
				{
					return OpCodes.Ret; // ret InlineNone
				}
				case 0x2B:
				{
					return OpCodes.Br_S; // br.s ShortInlineBrTarget
				}
				case 0x2C:
				{
					return OpCodes.Brfalse_S; // brfalse.s ShortInlineBrTarget
				}
				case 0x2D:
				{
					return OpCodes.Brtrue_S; // brtrue.s ShortInlineBrTarget
				}
				case 0x2E:
				{
					return OpCodes.Beq_S; // beq.s ShortInlineBrTarget
				}
				case 0x2F:
				{
					return OpCodes.Bge_S; // bge.s ShortInlineBrTarget
				}
				case 0x30:
				{
					return OpCodes.Bgt_S; // bgt.s ShortInlineBrTarget
				}
				case 0x31:
				{
					return OpCodes.Ble_S; // ble.s ShortInlineBrTarget
				}
				case 0x32:
				{
					return OpCodes.Blt_S; // blt.s ShortInlineBrTarget
				}
				case 0x33:
				{
					return OpCodes.Bne_Un_S; // bne.un.s ShortInlineBrTarget
				}
				case 0x34:
				{
					return OpCodes.Bge_Un_S; // bge.un.s ShortInlineBrTarget
				}
				case 0x35:
				{
					return OpCodes.Bgt_Un_S; // bgt.un.s ShortInlineBrTarget
				}
				case 0x36:
				{
					return OpCodes.Ble_Un_S; // ble.un.s ShortInlineBrTarget
				}
				case 0x37:
				{
					return OpCodes.Blt_Un_S; // blt.un.s ShortInlineBrTarget
				}
				case 0x38:
				{
					return OpCodes.Br; // br InlineBrTarget
				}
				case 0x39:
				{
					return OpCodes.Brfalse; // brfalse InlineBrTarget
				}
				case 0x3A:
				{
					return OpCodes.Brtrue; // brtrue InlineBrTarget
				}
				case 0x3B:
				{
					return OpCodes.Beq; // beq InlineBrTarget
				}
				case 0x3C:
				{
					return OpCodes.Bge; // bge InlineBrTarget
				}
				case 0x3D:
				{
					return OpCodes.Bgt; // bgt InlineBrTarget
				}
				case 0x3E:
				{
					return OpCodes.Ble; // ble InlineBrTarget
				}
				case 0x3F:
				{
					return OpCodes.Blt; // blt InlineBrTarget
				}
				case 0x40:
				{
					return OpCodes.Bne_Un; // bne.un InlineBrTarget
				}
				case 0x41:
				{
					return OpCodes.Bge_Un; // bge.un InlineBrTarget
				}
				case 0x42:
				{
					return OpCodes.Bgt_Un; // bgt.un InlineBrTarget
				}
				case 0x43:
				{
					return OpCodes.Ble_Un; // ble.un InlineBrTarget
				}
				case 0x44:
				{
					return OpCodes.Blt_Un; // blt.un InlineBrTarget
				}
				case 0x45:
				{
					return OpCodes.Switch; // switch InlineSwitch
				}
				case 0x46:
				{
					return OpCodes.Ldind_I1; // ldind.i1 InlineNone
				}
				case 0x47:
				{
					return OpCodes.Ldind_U1; // ldind.u1 InlineNone
				}
				case 0x48:
				{
					return OpCodes.Ldind_I2; // ldind.i2 InlineNone
				}
				case 0x49:
				{
					return OpCodes.Ldind_U2; // ldind.u2 InlineNone
				}
				case 0x4A:
				{
					return OpCodes.Ldind_I4; // ldind.i4 InlineNone
				}
				case 0x4B:
				{
					return OpCodes.Ldind_U4; // ldind.u4 InlineNone
				}
				case 0x4C:
				{
					return OpCodes.Ldind_I8; // ldind.i8 InlineNone
				}
				case 0x4D:
				{
					return OpCodes.Ldind_I; // ldind.i InlineNone
				}
				case 0x4E:
				{
					return OpCodes.Ldind_R4; // ldind.r4 InlineNone
				}
				case 0x4F:
				{
					return OpCodes.Ldind_R8; // ldind.r8 InlineNone
				}
				case 0x50:
				{
					return OpCodes.Ldind_Ref; // ldind.ref InlineNone
				}
				case 0x51:
				{
					return OpCodes.Stind_Ref; // stind.ref InlineNone
				}
				case 0x52:
				{
					return OpCodes.Stind_I1; // stind.i1 InlineNone
				}
				case 0x53:
				{
					return OpCodes.Stind_I2; // stind.i2 InlineNone
				}
				case 0x54:
				{
					return OpCodes.Stind_I4; // stind.i4 InlineNone
				}
				case 0x55:
				{
					return OpCodes.Stind_I8; // stind.i8 InlineNone
				}
				case 0x56:
				{
					return OpCodes.Stind_R4; // stind.r4 InlineNone
				}
				case 0x57:
				{
					return OpCodes.Stind_R8; // stind.r8 InlineNone
				}
				case 0x58:
				{
					return OpCodes.Add; // add InlineNone
				}
				case 0x59:
				{
					return OpCodes.Sub; // sub InlineNone
				}
				case 0x5A:
				{
					return OpCodes.Mul; // mul InlineNone
				}
				case 0x5B:
				{
					return OpCodes.Div; // div InlineNone
				}
				case 0x5C:
				{
					return OpCodes.Div_Un; // div.un InlineNone
				}
				case 0x5D:
				{
					return OpCodes.Rem; // rem InlineNone
				}
				case 0x5E:
				{
					return OpCodes.Rem_Un; // rem.un InlineNone
				}
				case 0x5F:
				{
					return OpCodes.And; // and InlineNone
				}
				case 0x60:
				{
					return OpCodes.Or; // or InlineNone
				}
				case 0x61:
				{
					return OpCodes.Xor; // xor InlineNone
				}
				case 0x62:
				{
					return OpCodes.Shl; // shl InlineNone
				}
				case 0x63:
				{
					return OpCodes.Shr; // shr InlineNone
				}
				case 0x64:
				{
					return OpCodes.Shr_Un; // shr.un InlineNone
				}
				case 0x65:
				{
					return OpCodes.Neg; // neg InlineNone
				}
				case 0x66:
				{
					return OpCodes.Not; // not InlineNone
				}
				case 0x67:
				{
					return OpCodes.Conv_I1; // conv.i1 InlineNone
				}
				case 0x68:
				{
					return OpCodes.Conv_I2; // conv.i2 InlineNone
				}
				case 0x69:
				{
					return OpCodes.Conv_I4; // conv.i4 InlineNone
				}
				case 0x6A:
				{
					return OpCodes.Conv_I8; // conv.i8 InlineNone
				}
				case 0x6B:
				{
					return OpCodes.Conv_R4; // conv.r4 InlineNone
				}
				case 0x6C:
				{
					return OpCodes.Conv_R8; // conv.r8 InlineNone
				}
				case 0x6D:
				{
					return OpCodes.Conv_U4; // conv.u4 InlineNone
				}
				case 0x6E:
				{
					return OpCodes.Conv_U8; // conv.u8 InlineNone
				}
				case 0x6F:
				{
					return OpCodes.Callvirt; // callvirt InlineMethod
				}
				case 0x70:
				{
					return OpCodes.Cpobj; // cpobj InlineType
				}
				case 0x71:
				{
					return OpCodes.Ldobj; // ldobj InlineType
				}
				case 0x72:
				{
					return OpCodes.Ldstr; // ldstr InlineString
				}
				case 0x73:
				{
					return OpCodes.Newobj; // newobj InlineMethod
				}
				case 0x74:
				{
					return OpCodes.Castclass; // castclass InlineType
				}
				case 0x75:
				{
					return OpCodes.Isinst; // isinst InlineType
				}
				case 0x76:
				{
					return OpCodes.Conv_R_Un; // conv.r.un InlineNone
				}
				case 0x79:
				{
					return OpCodes.Unbox; // unbox InlineType
				}
				case 0x7A:
				{
					return OpCodes.Throw; // throw InlineNone
				}
				case 0x7B:
				{
					return OpCodes.Ldfld; // ldfld InlineField
				}
				case 0x7C:
				{
					return OpCodes.Ldflda; // ldflda InlineField
				}
				case 0x7D:
				{
					return OpCodes.Stfld; // stfld InlineField
				}
				case 0x7E:
				{
					return OpCodes.Ldsfld; // ldsfld InlineField
				}
				case 0x7F:
				{
					return OpCodes.Ldsflda; // ldsflda InlineField
				}
				case 0x80:
				{
					return OpCodes.Stsfld; // stsfld InlineField
				}
				case 0x81:
				{
					return OpCodes.Stobj; // stobj InlineType
				}
				case 0x82:
				{
					return OpCodes.Conv_Ovf_I1_Un; // conv.ovf.i1.un InlineNone
				}
				case 0x83:
				{
					return OpCodes.Conv_Ovf_I2_Un; // conv.ovf.i2.un InlineNone
				}
				case 0x84:
				{
					return OpCodes.Conv_Ovf_I4_Un; // conv.ovf.i4.un InlineNone
				}
				case 0x85:
				{
					return OpCodes.Conv_Ovf_I8_Un; // conv.ovf.i8.un InlineNone
				}
				case 0x86:
				{
					return OpCodes.Conv_Ovf_U1_Un; // conv.ovf.u1.un InlineNone
				}
				case 0x87:
				{
					return OpCodes.Conv_Ovf_U2_Un; // conv.ovf.u2.un InlineNone
				}
				case 0x88:
				{
					return OpCodes.Conv_Ovf_U4_Un; // conv.ovf.u4.un InlineNone
				}
				case 0x89:
				{
					return OpCodes.Conv_Ovf_U8_Un; // conv.ovf.u8.un InlineNone
				}
				case 0x8A:
				{
					return OpCodes.Conv_Ovf_I_Un; // conv.ovf.i.un InlineNone
				}
				case 0x8B:
				{
					return OpCodes.Conv_Ovf_U_Un; // conv.ovf.u.un InlineNone
				}
				case 0x8C:
				{
					return OpCodes.Box; // box InlineType
				}
				case 0x8D:
				{
					return OpCodes.Newarr; // newarr InlineType
				}
				case 0x8E:
				{
					return OpCodes.Ldlen; // ldlen InlineNone
				}
				case 0x8F:
				{
					return OpCodes.Ldelema; // ldelema InlineType
				}
				case 0x90:
				{
					return OpCodes.Ldelem_I1; // ldelem.i1 InlineNone
				}
				case 0x91:
				{
					return OpCodes.Ldelem_U1; // ldelem.u1 InlineNone
				}
				case 0x92:
				{
					return OpCodes.Ldelem_I2; // ldelem.i2 InlineNone
				}
				case 0x93:
				{
					return OpCodes.Ldelem_U2; // ldelem.u2 InlineNone
				}
				case 0x94:
				{
					return OpCodes.Ldelem_I4; // ldelem.i4 InlineNone
				}
				case 0x95:
				{
					return OpCodes.Ldelem_U4; // ldelem.u4 InlineNone
				}
				case 0x96:
				{
					return OpCodes.Ldelem_I8; // ldelem.i8 InlineNone
				}
				case 0x97:
				{
					return OpCodes.Ldelem_I; // ldelem.i InlineNone
				}
				case 0x98:
				{
					return OpCodes.Ldelem_R4; // ldelem.r4 InlineNone
				}
				case 0x99:
				{
					return OpCodes.Ldelem_R8; // ldelem.r8 InlineNone
				}
				case 0x9A:
				{
					return OpCodes.Ldelem_Ref; // ldelem.ref InlineNone
				}
				case 0x9B:
				{
					return OpCodes.Stelem_I; // stelem.i InlineNone
				}
				case 0x9C:
				{
					return OpCodes.Stelem_I1; // stelem.i1 InlineNone
				}
				case 0x9D:
				{
					return OpCodes.Stelem_I2; // stelem.i2 InlineNone
				}
				case 0x9E:
				{
					return OpCodes.Stelem_I4; // stelem.i4 InlineNone
				}
				case 0x9F:
				{
					return OpCodes.Stelem_I8; // stelem.i8 InlineNone
				}
				case 0xA0:
				{
					return OpCodes.Stelem_R4; // stelem.r4 InlineNone
				}
				case 0xA1:
				{
					return OpCodes.Stelem_R8; // stelem.r8 InlineNone
				}
				case 0xA2:
				{
					return OpCodes.Stelem_Ref; // stelem.ref InlineNone
				}
				case 0xA3:
				{
					return OpCodes.Ldelem; // ldelem InlineType
				}
				case 0xA4:
				{
					return OpCodes.Stelem; // stelem InlineType
				}
				case 0xA5:
				{
					return OpCodes.Unbox_Any; // unbox.any InlineType
				}
				case 0xB3:
				{
					return OpCodes.Conv_Ovf_I1; // conv.ovf.i1 InlineNone
				}
				case 0xB4:
				{
					return OpCodes.Conv_Ovf_U1; // conv.ovf.u1 InlineNone
				}
				case 0xB5:
				{
					return OpCodes.Conv_Ovf_I2; // conv.ovf.i2 InlineNone
				}
				case 0xB6:
				{
					return OpCodes.Conv_Ovf_U2; // conv.ovf.u2 InlineNone
				}
				case 0xB7:
				{
					return OpCodes.Conv_Ovf_I4; // conv.ovf.i4 InlineNone
				}
				case 0xB8:
				{
					return OpCodes.Conv_Ovf_U4; // conv.ovf.u4 InlineNone
				}
				case 0xB9:
				{
					return OpCodes.Conv_Ovf_I8; // conv.ovf.i8 InlineNone
				}
				case 0xBA:
				{
					return OpCodes.Conv_Ovf_U8; // conv.ovf.u8 InlineNone
				}
				case 0xC2:
				{
					return OpCodes.Refanyval; // refanyval InlineType
				}
				case 0xC3:
				{
					return OpCodes.Ckfinite; // ckfinite InlineNone
				}
				case 0xC6:
				{
					return OpCodes.Mkrefany; // mkrefany InlineType
				}
				case 0xD0:
				{
					return OpCodes.Ldtoken; // ldtoken InlineTok
				}
				case 0xD1:
				{
					return OpCodes.Conv_U2; // conv.u2 InlineNone
				}
				case 0xD2:
				{
					return OpCodes.Conv_U1; // conv.u1 InlineNone
				}
				case 0xD3:
				{
					return OpCodes.Conv_I; // conv.i InlineNone
				}
				case 0xD4:
				{
					return OpCodes.Conv_Ovf_I; // conv.ovf.i InlineNone
				}
				case 0xD5:
				{
					return OpCodes.Conv_Ovf_U; // conv.ovf.u InlineNone
				}
				case 0xD6:
				{
					return OpCodes.Add_Ovf; // add.ovf InlineNone
				}
				case 0xD7:
				{
					return OpCodes.Add_Ovf_Un; // add.ovf.un InlineNone
				}
				case 0xD8:
				{
					return OpCodes.Mul_Ovf; // mul.ovf InlineNone
				}
				case 0xD9:
				{
					return OpCodes.Mul_Ovf_Un; // mul.ovf.un InlineNone
				}
				case 0xDA:
				{
					return OpCodes.Sub_Ovf; // sub.ovf InlineNone
				}
				case 0xDB:
				{
					return OpCodes.Sub_Ovf_Un; // sub.ovf.un InlineNone
				}
				case 0xDC:
				{
					return OpCodes.Endfinally; // endfinally InlineNone
				}
				case 0xDD:
				{
					return OpCodes.Leave; // leave InlineBrTarget
				}
				case 0xDE:
				{
					return OpCodes.Leave_S; // leave.s ShortInlineBrTarget
				}
				case 0xDF:
				{
					return OpCodes.Stind_I; // stind.i InlineNone
				}
				case 0xE0:
				{
					return OpCodes.Conv_U; // conv.u InlineNone
				}
				default:
				{
					var opCode = BinaryPrimitives.ReadUInt16BigEndian(il);
					switch (opCode)
					{
						case 0xFE00:
						{
							return OpCodes.Arglist; // arglist InlineNone
						}
						case 0xFE01:
						{
							return OpCodes.Ceq; // ceq InlineNone
						}
						case 0xFE02:
						{
							return OpCodes.Cgt; // cgt InlineNone
						}
						case 0xFE03:
						{
							return OpCodes.Cgt_Un; // cgt.un InlineNone
						}
						case 0xFE04:
						{
							return OpCodes.Clt; // clt InlineNone
						}
						case 0xFE05:
						{
							return OpCodes.Clt_Un; // clt.un InlineNone
						}
						case 0xFE06:
						{
							return OpCodes.Ldftn; // ldftn InlineMethod
						}
						case 0xFE07:
						{
							return OpCodes.Ldvirtftn; // ldvirtftn InlineMethod
						}
						case 0xFE09:
						{
							return OpCodes.Ldarg; // ldarg InlineVar
						}
						case 0xFE0A:
						{
							return OpCodes.Ldarga; // ldarga InlineVar
						}
						case 0xFE0B:
						{
							return OpCodes.Starg; // starg InlineVar
						}
						case 0xFE0C:
						{
							return OpCodes.Ldloc; // ldloc InlineVar
						}
						case 0xFE0D:
						{
							return OpCodes.Ldloca; // ldloca InlineVar
						}
						case 0xFE0E:
						{
							return OpCodes.Stloc; // stloc InlineVar
						}
						case 0xFE0F:
						{
							return OpCodes.Localloc; // localloc InlineNone
						}
						case 0xFE11:
						{
							return OpCodes.Endfilter; // endfilter InlineNone
						}
						case 0xFE12:
						{
							return OpCodes.Unaligned; // unaligned. ShortInlineI
						}
						case 0xFE13:
						{
							return OpCodes.Volatile; // volatile. InlineNone
						}
						case 0xFE14:
						{
							return OpCodes.Tailcall; // tail. InlineNone
						}
						case 0xFE15:
						{
							return OpCodes.Initobj; // initobj InlineType
						}
						case 0xFE16:
						{
							return OpCodes.Constrained; // constrained. InlineType
						}
						case 0xFE17:
						{
							return OpCodes.Cpblk; // cpblk InlineNone
						}
						case 0xFE18:
						{
							return OpCodes.Initblk; // initblk InlineNone
						}
						case 0xFE1A:
						{
							return OpCodes.Rethrow; // rethrow InlineNone
						}
						case 0xFE1C:
						{
							return OpCodes.Sizeof; // sizeof InlineType
						}
						case 0xFE1D:
						{
							return OpCodes.Refanytype; // refanytype InlineNone
						}
						case 0xFE1E:
						{
							return OpCodes.Readonly; // readonly. InlineNone
						}
						default:
						{
							throw new Exception($"Unknown opcode 0x{opCode}.");
						}
					}
				}
			}
		}
	}
}
