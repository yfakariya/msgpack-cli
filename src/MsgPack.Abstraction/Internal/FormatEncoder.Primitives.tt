<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;
using System.Buffers;
using System.Runtime.CompilerServices;

namespace MsgPack.Internal
{
	partial class FormatEncoder
	{
<#
foreach (var inputType in new [] {
	"Int32",
	"Int64",
	"UInt32",
	"UInt64",
	"Single",
	"Double",
	"Boolean"
})
{
#>
		/// <summary>
		///		Encodes <see cref="<#= inputType #>" /> value to specified buffer.
		///		The implementation will choose most compact format.
		/// </summary>
		/// <param name="value">Value to be encoded.</param>
		/// <param name="buffer"><see cref="IBufferWriter{T}">IBufferWriter&lt;byte&gt;</see>.</param>
		/// <exception cref="ArgumentNullException"><paramref name="buffer" /> is <c>null</c>.</exception>
		/// <exception cref="NotSupportedException">The underlying format does not suppor this type.</exception>
		public abstract void Encode<#= inputType #>(<#= inputType #> value, IBufferWriter<byte> buffer);

		/// <summary>
		///		Encodes <see cref="<#= inputType #>" /> value or <c>null</c> to specified buffer.
		///		The implementation will choose most compact format.
		/// </summary>
		/// <param name="value">Value to be encoded.</param>
		/// <param name="buffer"><see cref="IBufferWriter{T}">IBufferWriter&lt;byte&gt;</see>.</param>
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public void Encode<#= inputType #>(<#= inputType #>? value, IBufferWriter<byte> buffer)
		{
			buffer = Ensure.NotNull(buffer);

			if (value == null)
			{
				this.EncodeNull(buffer);
			}
			else
			{
				this.Encode<#= inputType #>(value.GetValueOrDefault(), buffer);
			}
		}
<#
}
#>
	}
}
