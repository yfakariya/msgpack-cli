// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

#nullable enable

using System;
using System.Text;
using System.Threading;
using MsgPack.Internal;

namespace MsgPack.Serialization
{
	public sealed class AsyncSerializationOperationContext
	{
		public FormatEncoder Encoder { get; }
		public SerializationOptions Options { get; }
		public Encoding? StringEncoding => this.Options.StringEncoding;
		public int CurrentDepth { get; private set; }
		public CancellationToken CancellationToken { get; }

		public AsyncSerializationOperationContext(FormatEncoder encoder, SerializationOptions? options, CancellationToken cancellationToken)
		{
			this.Encoder = Ensure.NotNull(encoder);
			this.Options = options ?? SerializationOptions.Default;
			this.CurrentDepth = 0;
			this.CancellationToken = cancellationToken;
		}

		public SerializationOperationContext AsSerializationOperationContext()
			=> new SerializationOperationContext(this.Encoder, this.Options, this.CancellationToken);

		public CollectionContext CollectionContext => new CollectionContext(Int32.MaxValue, Int32.MaxValue, Int32.MaxValue, this.CurrentDepth);

		public int IncrementDepth()
		{
			if (this.CurrentDepth == this.Options.MaxDepth)
			{
				Throw.DepthExeeded(this.CurrentDepth, this.Options.MaxDepth);
			}

			return this.CurrentDepth++;
		}

		public int DecrementDepth()
		{
			if (this.CurrentDepth == 0)
			{
				Throw.DepthUnderflow();
			}

			return this.CurrentDepth--;
		}
	}
}
