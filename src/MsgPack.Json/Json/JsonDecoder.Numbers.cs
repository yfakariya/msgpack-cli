// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using MsgPack.Internal;

namespace MsgPack.Json
{
	partial class JsonDecoder
	{
		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Byte DecodeByte(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeByteCore(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private Byte DecodeByteCore(ref SequenceReader<byte> source, out int requestHint)
			=> (Byte)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override SByte DecodeSByte(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeSByteCore(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private SByte DecodeSByteCore(ref SequenceReader<byte> source, out int requestHint)
			=> (SByte)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Int16 DecodeInt16(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeInt16Core(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private Int16 DecodeInt16Core(ref SequenceReader<byte> source, out int requestHint)
			=> (Int16)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override UInt16 DecodeUInt16(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeUInt16Core(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private UInt16 DecodeUInt16Core(ref SequenceReader<byte> source, out int requestHint)
			=> (UInt16)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Int32 DecodeInt32(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeInt32Core(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private Int32 DecodeInt32Core(ref SequenceReader<byte> source, out int requestHint)
			=> (Int32)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override UInt32 DecodeUInt32(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeUInt32Core(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private UInt32 DecodeUInt32Core(ref SequenceReader<byte> source, out int requestHint)
			=> (UInt32)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Int64 DecodeInt64(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeInt64Core(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private Int64 DecodeInt64Core(ref SequenceReader<byte> source, out int requestHint)
			=> (Int64)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override UInt64 DecodeUInt64(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeUInt64Core(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private UInt64 DecodeUInt64Core(ref SequenceReader<byte> source, out int requestHint)
			=> (UInt64)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Single DecodeSingle(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeSingleCore(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private Single DecodeSingleCore(ref SequenceReader<byte> source, out int requestHint)
			=> (Single)this.DecodeNumber(ref source, out requestHint);

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Double DecodeDouble(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			return this.DecodeDoubleCore(ref source, out requestHint);
		}

		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		private Double DecodeDoubleCore(ref SequenceReader<byte> source, out int requestHint)
			=> (Double)this.DecodeNumber(ref source, out requestHint);

	}
}
