// Copyright (c) FUJIWARA, Yusuke and all contributors.
// This file is licensed under Apache2 license.
// See the LICENSE in the project root for more information.

// <auto-generated /> 
// This file is generated from acompanying .tt file.
// DO NOT edit this file directly, edit .tt file instead.

using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using MsgPack.Internal;

namespace MsgPack.Json
{
	partial class JsonDecoder
	{
		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Byte? DecodeNullableByte(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeByteCore(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override SByte? DecodeNullableSByte(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeSByteCore(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Int16? DecodeNullableInt16(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeInt16Core(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override UInt16? DecodeNullableUInt16(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeUInt16Core(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Int32? DecodeNullableInt32(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeInt32Core(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override UInt32? DecodeNullableUInt32(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeUInt32Core(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Int64? DecodeNullableInt64(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeInt64Core(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override UInt64? DecodeNullableUInt64(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeUInt64Core(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Single? DecodeNullableSingle(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeSingleCore(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Double? DecodeNullableDouble(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeDoubleCore(ref source, out requestHint);
		}

		/// <inheritdoc />
		[MethodImpl(MethodImplOptionsShim.AggressiveInlining)]
		public sealed override Boolean? DecodeNullableBoolean(ref SequenceReader<byte> source, out int requestHint)
		{
			this.ReadTrivia(ref source);
			if (this.TryDecodeNull(ref source))
			{
				requestHint = 0;
				return null;
			}

			return this.DecodeBooleanCore(ref source, out requestHint);
		}

	}
}
